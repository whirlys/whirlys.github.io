<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ElasticSearch初体验</title>
      <link href="/2018/08/ElasticSearch%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2018/08/ElasticSearch%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="需要明白的问题"><a href="#需要明白的问题" class="headerlink" title="需要明白的问题"></a>需要明白的问题</h3><ol><li>什么是倒排索引？它的组成是什么？</li><li>常见的相关性算分方法有哪些？</li><li>为什么查询语句没有返回预期的文档？</li><li>常用的数据类型有哪些？Text和Keyword的区别是什么？</li><li>集群是如何搭建起来的？是如何实现故障转移的？</li><li>Shard具体是由什么组成的？</li></ol><h2 id="Elastic-Stack"><a href="#Elastic-Stack" class="headerlink" title="Elastic Stack"></a>Elastic Stack</h2><p>构建在开源基础之上, Elastic Stack 让您能够安全可靠地获取任何来源、任何格式的数据，并且能够实时地对数据进行搜索、分析和可视化</p><p><strong>Elasticsearch</strong> 是基于 JSON 的分布式搜索和分析引擎，专为实现水平扩展、高可用和管理便捷性而设计。</p><p><strong>Kibana</strong> 能够以图表的形式呈现数据，并且具有可扩展的用户界面，供您全方位配置和管理 Elastic Stack。</p><p><strong>Logstash</strong> 是动态数据收集管道，拥有可扩展的插件生态系统，能够与 Elasticsearch 产生强大的协同作用。</p><p><strong>Beats</strong> 是轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据。</p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html" target="_blank" rel="noopener">基础概念</a></h3><ul><li>文档 Document ：用户存储在ES中的数据文档</li><li>索引 Index ：由具有一些相同字段的文档的集合</li><li>类型 Type :  允许将不同类型的文档存储在同一索引中，6.0开始官方不允许在一个index下建立多个type，统一type名称：doc</li><li>节点 Node ：一个Elasticsearch的运行实例，是集群的构成单元，存储部分或全部数据，并参与集群的索引和搜索功能</li><li>集群 Cluster ：由一个或多个节点组成的集合，共同保存所有的数据，对外提供服务（包括跨所有节点的联合索引和搜索功能等）</li><li>分片 Shards ：分片是为了解决存储大规模数据的问题，将数据切分分别存储到不同的分片中</li><li>副本 Replicas ：副本可以在分片或节点发生故障时提高可用性，而且由于可以在所有副本上进行并行搜索，所以也可以提高集群的吞吐量</li><li>近实时 Near Realtime(NRT)：从索引文档到可搜索文档的时间有一点延迟（通常为一秒）</li></ul><blockquote><p>note:</p><ol><li>在创建索引的时候如果没有配置索引Mapping，一个索引默认有5个shard和1个副本，一个索引总共有10个shard（算上副本shard）</li><li>Elasticsearch 的shard实际上是一个Lucene索引，截止Lucene-5843，一个Lucene索引限制的最大文档数为2,147,483,519 (= Integer.MAX_VALUE - 128)</li></ol></blockquote><h3 id="安装Elasticsearch-amp-Kibana"><a href="#安装Elasticsearch-amp-Kibana" class="headerlink" title="安装Elasticsearch &amp; Kibana"></a>安装Elasticsearch &amp; Kibana</h3><p>ES和Kibana的安装很简单，前提需要先安装好Java8，然后执行以下命令即可</p><h5 id="elasticsearch单节点最简安装"><a href="#elasticsearch单节点最简安装" class="headerlink" title="elasticsearch单节点最简安装"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html" target="_blank" rel="noopener">elasticsearch单节点最简安装</a></h5><pre><code># 在Ubuntu16.04上安装，方式有很多种，选择二进制压缩包的方式安装# 1. 在普通用户家目录下，下载压缩包curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.tar.gz# 2. 解压tar -xvf elasticsearch-6.3.2.tar.gz# 3. 移动至/opt目录下sudo mv elasticsearch-6.3.2 /opt# 4. 修改配置文件elasticsearch.yml中的 network.host 值为 0.0.0.0，其他的配置参考官方文档cd /opt/elasticsearch-6.3.2vi config/elasticsearch.yml# 5. 启动单节点，然后浏览器访问host:9200即可看到ES集群信息bin/elasticsearch</code></pre><p><img src="http://image.laijianfeng.org/20180815_153244.png" alt="image"></p><h5 id="kibana最简安装"><a href="#kibana最简安装" class="headerlink" title="kibana最简安装"></a><a href="https://www.elastic.co/guide/en/kibana/current/targz.html" target="_blank" rel="noopener">kibana最简安装</a></h5><pre><code>wget https://artifacts.elastic.co/downloads/kibana/kibana-6.3.2-linux-x86_64.tar.gzshasum -a 512 kibana-6.3.2-linux-x86_64.tar.gz tar -xzf kibana-6.3.2-linux-x86_64.tar.gzsudo mv kibana-6.3.2-linux-x86_64 /optcd /opt/kibana-6.3.2-linux-x86_64# 修改 config/kibana.yml中 server.host: 0.0.0.0# 启动Kibana，访问 host:5601即可进入kibana界面</code></pre><p><img src="http://image.laijianfeng.org/20180815_153435.png" alt="image"></p><h3 id="交互方式-Rest-API"><a href="#交互方式-Rest-API" class="headerlink" title="交互方式 Rest API"></a>交互方式 Rest API</h3><p>Elasticsearch集群对外提供RESTful API</p><ul><li>Curl命令行</li><li>Kibana Devtools</li><li>Java API</li><li>其他各种API，如Python API等</li></ul><blockquote><p>note:<br>我们后面主要使用 Kibana Devtools 这种交互方式</p></blockquote><p><img src="http://image.laijianfeng.org/20180815_154136.png" alt="image"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html" target="_blank" rel="noopener">数据类型</a></h3><ul><li>字符串： text（分词）, keyword（不分词）</li><li>数值型： long, integer, byte, double, float, half_float, scaled_float</li><li>布尔： boolean</li><li>日期： date</li><li>二进制： binary</li><li>范围类型： integer_range, float_range, long_range, double_range, date_range</li><li>复杂数据类型： Array, Object, Nested</li><li>地理： geo_point， geo_shape</li><li>专业： ip，completion， token_count， murmur3， Percolator， join</li><li>组合的</li></ul><h3 id="探索ES集群"><a href="#探索ES集群" class="headerlink" title="探索ES集群"></a>探索ES集群</h3><p>Check your cluster, node, and index health, status, and statistics<br>Administer your cluster, node, and index data and metadata<br>Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes<br>Execute advanced search operations such as paging, sorting, filtering, scripting, aggregations, and many others</p><h5 id="使用-cat-API探索集群的健康情况"><a href="#使用-cat-API探索集群的健康情况" class="headerlink" title="使用_cat API探索集群的健康情况"></a>使用_cat API探索集群的健康情况</h5><pre><code>GET /_cat/health?v# 结果epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1534319381 15:49:41  elasticsearch green           3         3    118  59    0    0        0             0                  -                100.0%</code></pre><p>集群的健康状态(status)有三种:</p><ul><li>green：一切正常（集群功能齐全）</li><li>yellow：所有数据都可用，但存在一些副本未分配（群集功能齐全）</li><li>red：一些数据由于某种原因不可用（群集部分功能失效）</li></ul><h5 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h5><pre><code>GET /_cat/nodes?v# 结果（我的ES集群安装了三个节点）ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name10.100.97.207           30          96  13    0.15    0.08     0.08 mdi       *      master10.100.97.246           68          96   3    0.00    0.00     0.00 mdi       -      hadoop210.100.98.22            15          97   2    0.00    0.02     0.04 mdi       -      hadoop3</code></pre><h5 id="查看索引信息"><a href="#查看索引信息" class="headerlink" title="查看索引信息"></a>查看索引信息</h5><pre><code>GET /_cat/indices?v# 结果health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.sizegreen  open   logstash-2015.05.20             4BjPjpq6RhOSCNUPMsY0MQ   5   1       4750            0     46.8mb         24.5mbgreen  open   logstash-2015.05.18             mDkUKHSWR0a8UeZlKzts8Q   5   1       4631            0     45.6mb         23.8mbgreen  open   hockey                          g1omiazvRSOE117w_uy_wA   5   1         11            0     45.3kb         22.6kbgreen  open   .kibana                         AGdo8im_TxC04ARexUxqxw   1   1        143           10    665.6kb        332.8kbgreen  open   shakespeare                     5009bDa7T16f5qTeyOdTlw   5   1     111396            0     43.9mb           22mbgreen  open   logstash-2015.05.19             az4Jen4nT7-J9yRYpZ0A9A   5   1       4624            0     44.7mb         23.1mb...</code></pre><h3 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h3><h5 id="插入文档并查询"><a href="#插入文档并查询" class="headerlink" title="插入文档并查询"></a>插入文档并查询</h5><pre><code># 插入一个文档PUT /customer/_doc/1?pretty{  &quot;name&quot;: &quot;John Doe&quot;}# 结果{  &quot;_index&quot;: &quot;customer&quot;,  &quot;_type&quot;: &quot;_doc&quot;,  &quot;_id&quot;: &quot;1&quot;,  &quot;_version&quot;: 1,  &quot;result&quot;: &quot;updated&quot;,  &quot;_shards&quot;: {    &quot;total&quot;: 2,    &quot;successful&quot;: 2,    &quot;failed&quot;: 0  },  &quot;_seq_no&quot;: 1,  &quot;_primary_term&quot;: 1}# 查询该文档GET /customer/_doc/1#结果{  &quot;_index&quot;: &quot;customer&quot;,  &quot;_type&quot;: &quot;_doc&quot;,  &quot;_id&quot;: &quot;1&quot;,  &quot;_version&quot;: 1,  &quot;found&quot;: true,  &quot;_source&quot;: {    &quot;name&quot;: &quot;John Doe&quot;  }}</code></pre><blockquote><p>note:</p><ol><li><code>customer</code> 为索引名，<code>_doc</code> 为type，1为文档_id，需要注意的是：在es6.x建议索引的type值固定为<code>_doc</code>，在之后的版本将删除type了；文档id若不指定，es会自动分配一个_id给文档</li><li>插入文档后，查看索引信息<code>GET /_cat/indices?v</code>可以看到多了 customer 的索引信息</li><li>文档结果，_source字段是原始的json内容，其他的为文档元数据</li></ol></blockquote><h5 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html" target="_blank" rel="noopener">文档元数据</a></h5><p>用于标注文档的元信息</p><ul><li>_index: 文档所在的索引名</li><li>_type: 文档所在的类型名</li><li>_id: 文档的唯一id</li><li>_uid: 组合id，由_type和_id组成（6.0开始_type不再起作用，同_id一样）</li><li>_source: 文档的原始json数据，可以从这里获取每个字段的内容</li><li>_all: 整合所有字段内容到该字段，默认禁用</li><li>_routing 默认值为 _id，决定文档存储在哪个shard上：<code>shard_num = hash(_routing) % num_primary_shards</code> </li></ul><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><pre><code>DELETE customer#结果{  &quot;acknowledged&quot;: true}GET /_cat/indices?v# 再次查看索引信息，可以发现 customer 不存在，已被删除</code></pre><h5 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h5><pre><code>PUT /customer/_doc/1?pretty{  &quot;name&quot;: &quot;John Doe&quot;}POST /customer/_doc/1/_update{  &quot;doc&quot;: { &quot;name&quot;: &quot;Jane Doe&quot; }}POST /customer/_doc/1/_update{  &quot;doc&quot;: { &quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 20 }}# 可以看到 \_version的值一直在增加</code></pre><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><pre><code>DELETE /customer/_doc/2</code></pre><h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><p>es提供了<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/docs-bulk.html" target="_blank" rel="noopener">_bulk API</a>供批量操作，可以提高索引、更新、删除等操作的效率</p><p>_bulk操作的类型有四种：</p><ul><li>index 索引：若已存在，则覆盖，文档不存在则创建</li><li>create 创建：文档不存在则异常</li><li>delete 删除</li><li>update 更新</li></ul><pre><code># _bulk 任务：# 1. index创建 customer索引下id为3的文档# 2. delete删除 customer索引下id为3的文档# 3. create创建 customer索引下id为3的文档# 4. update更新 customer索引下id为3的文档POST _bulk{&quot;index&quot;:{&quot;_index&quot;:&quot;customer&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;3&quot;}}{&quot;name&quot;:&quot;whirly&quot;}{&quot;delete&quot;:{&quot;_index&quot;:&quot;customer&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;3&quot;}}{&quot;create&quot;:{&quot;_index&quot;:&quot;customer&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;3&quot;}}{&quot;name&quot;:&quot;whirly2&quot;}{&quot;update&quot;:{&quot;_index&quot;:&quot;customer&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;3&quot;}}{&quot;doc&quot;:{&quot;name&quot;:&quot;whirly3&quot;}}</code></pre><p><img src="http://image.laijianfeng.org/20180815_164226.png" alt="image"></p><blockquote><p>note:</p><ol><li>批量查询用的是 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/docs-multi-get.html" target="_blank" rel="noopener">Multi Get API</a></li></ol></blockquote><h3 id="探索数据"><a href="#探索数据" class="headerlink" title="探索数据"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_exploring_your_data.html" target="_blank" rel="noopener">探索数据</a></h3><p>一个<a href="https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">简单的数据集</a>，数据结构如下：</p><pre><code>{    &quot;account_number&quot;: 0,    &quot;balance&quot;: 16623,    &quot;firstname&quot;: &quot;Bradshaw&quot;,    &quot;lastname&quot;: &quot;Mckenzie&quot;,    &quot;age&quot;: 29,    &quot;gender&quot;: &quot;F&quot;,    &quot;address&quot;: &quot;244 Columbus Place&quot;,    &quot;employer&quot;: &quot;Euron&quot;,    &quot;email&quot;: &quot;bradshawmckenzie@euron.com&quot;,    &quot;city&quot;: &quot;Hobucken&quot;,    &quot;state&quot;: &quot;CO&quot;}</code></pre><p>导入这个简单的数据集到es中</p><pre><code># 下载wget https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json# 导入curl -H &quot;Content-Type: application/json&quot; -XPOST &quot;localhost:9200/bank/_doc/_bulk?pretty&amp;refresh&quot; --data-binary &quot;@accounts.json&quot;</code></pre><p>上述命令是通过 _bulk API 将 account.json 的内容插入 bank 索引中，type 为 _doc</p><pre><code># account.json的内容:{&quot;index&quot;:{&quot;_id&quot;:&quot;1&quot;}}{&quot;account_number&quot;:1,&quot;balance&quot;:39225,&quot;firstname&quot;:&quot;Amber&quot;,&quot;lastname&quot;:&quot;Duke&quot;,&quot;age&quot;:32,&quot;gender&quot;:&quot;M&quot;,&quot;address&quot;:&quot;880 Holmes Lane&quot;,&quot;employer&quot;:&quot;Pyrami&quot;,&quot;email&quot;:&quot;amberduke@pyrami.com&quot;,&quot;city&quot;:&quot;Brogan&quot;,&quot;state&quot;:&quot;IL&quot;}...# 导入完成后可以看到 bank 索引已存在 1000 条数据GET bank/_search</code></pre><h5 id="查询数据-API"><a href="#查询数据-API" class="headerlink" title="查询数据 API"></a>查询数据 API</h5><p>任务：查询所有数据，根据 account_number 字段升序排序</p><ol><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/search-uri-request.html#search-uri-request" target="_blank" rel="noopener">URI Search 方式</a></p><pre><code>GET /bank/_search?q=*&amp;sort=account_number:asc&amp;pretty</code></pre></li><li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/search-request-body.html" target="_blank" rel="noopener">Request Body Search</a> 方式</p><pre><code>GET /bank/_search{&quot;query&quot;: { &quot;match_all&quot;: {} },&quot;sort&quot;: [ { &quot;account_number&quot;: &quot;asc&quot; }]}</code></pre></li></ol><p>结果</p><pre><code>{  &quot;took&quot;: 41,  &quot;timed_out&quot;: false,  &quot;_shards&quot;: {    &quot;total&quot;: 5,    &quot;successful&quot;: 5,    &quot;skipped&quot;: 0,    &quot;failed&quot;: 0  },  &quot;hits&quot;: {    &quot;total&quot;: 1000,    &quot;max_score&quot;: null,    &quot;hits&quot;: [      {        &quot;_index&quot;: &quot;bank&quot;,        &quot;_type&quot;: &quot;account&quot;,        &quot;_id&quot;: &quot;0&quot;,        &quot;_score&quot;: null,        &quot;_source&quot;: {          &quot;account_number&quot;: 0,          &quot;balance&quot;: 16623,          &quot;firstname&quot;: &quot;Bradshaw&quot;,          &quot;lastname&quot;: &quot;Mckenzie&quot;,          &quot;age&quot;: 29,          &quot;gender&quot;: &quot;F&quot;,          &quot;address&quot;: &quot;244 Columbus Place&quot;,          &quot;employer&quot;: &quot;Euron&quot;,          &quot;email&quot;: &quot;bradshawmckenzie@euron.com&quot;,          &quot;city&quot;: &quot;Hobucken&quot;,          &quot;state&quot;: &quot;CO&quot;        },        &quot;sort&quot;: [          0        ]      }...    ]  }}</code></pre><p>各个参数意思：</p><ul><li>took：本次查询耗费的时间（单位：毫秒）</li><li>timed_out：是否超时</li><li>_shards：本次查询搜索的 shard 的数量，包括成功的和失败的</li><li>hits：查询结果</li><li>hits.total：匹配的文档数量</li><li>hits.hits：匹配的文档，默认返回10个文档</li><li>hits.sort：排序的值</li><li>_score：文档的得分</li><li>hits.max_score：所有文档最高的得分</li></ul><h3 id="简要介绍-Query-DSL"><a href="#简要介绍-Query-DSL" class="headerlink" title="简要介绍 Query DSL"></a>简要介绍 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/query-dsl.html" target="_blank" rel="noopener">Query DSL</a></h3><p>这个Elasticsearch提供的基于 json 的查询语言，我们通过一个小任务来了解一下</p><p>任务要求：</p><ol><li>查询 firstname 中为 “R” 开头，年龄在 20 到 30 岁之间的人物信息</li><li>限制返回的字段为 firstname,city,address,email,balance</li><li>根据年龄倒序排序，返回前十条数据</li><li>对 firstname 字段进行高亮显示</li><li>同时求所有匹配人物的 平均balance</li></ol><pre><code>GET bank/_search{  &quot;query&quot;: {    &quot;bool&quot;: {      &quot;must&quot;: [        {          &quot;match_phrase_prefix&quot;: {            &quot;firstname&quot;: &quot;R&quot;          }        }      ],      &quot;filter&quot;: {        &quot;range&quot;: {          &quot;age&quot;: {            &quot;gte&quot;: 20,            &quot;lte&quot;: 30          }        }      }    }  },  &quot;from&quot;: 0,  &quot;size&quot;: 10,  &quot;sort&quot;: [    {      &quot;age&quot;: {        &quot;order&quot;: &quot;desc&quot;      }    }  ],  &quot;_source&quot;: [    &quot;firstname&quot;,    &quot;city&quot;,    &quot;address&quot;,    &quot;email&quot;,    &quot;balance&quot;  ],  &quot;highlight&quot;: {    &quot;fields&quot;: {      &quot;firstname&quot;: {}    }  },  &quot;aggs&quot;: {    &quot;avg_age&quot;: {      &quot;avg&quot;: {        &quot;field&quot;: &quot;balance&quot;      }    }  }}</code></pre><p>其中：</p><ul><li>query 部分可以写各种查询条件</li><li>from, size 设置要返回的文档的起始序号</li><li>sort 设置排序规则</li><li>_source 设置要返回的文档的字段</li><li>highlight 设置高亮的字段</li><li>aggs 为设置聚合统计规则</li></ul><h5 id="更多查询示例"><a href="#更多查询示例" class="headerlink" title="更多查询示例"></a>更多查询示例</h5><ul><li>match_all 查询 bank 索引所有文档</li></ul><pre><code>GET /bank/_search{  &quot;query&quot;: {    &quot;match_all&quot;: {}  },  &quot;size&quot;: 2}</code></pre><ul><li>match 全文搜索，查询 address 字段值为 mill lane 的所有文档</li></ul><pre><code>GET /bank/_search{  &quot;query&quot;: {    &quot;match&quot;: {      &quot;address&quot;: &quot;mill lane&quot;    }  }}</code></pre><ul><li>match_phrase 短语匹配</li></ul><pre><code>GET /bank/_search{  &quot;query&quot;: {    &quot;match_phrase&quot;: {      &quot;address&quot;: &quot;mill lane&quot;    }  }}</code></pre><blockquote><p>note:<br>match 和 match_phrase 的区别：</p><ul><li>match 中会分词，将 mill lane 拆分为 mill 和 lane， 实际查询 address 中有 mill <strong>或者</strong> lane 的文档</li><li>match_phrase：将 mill lane 作为一个整体查询，实际查询 address 中有 mill lane 的文档</li></ul></blockquote><ul><li>布尔查询（多条件查询）</li></ul><pre><code>GET /bank/_search{  &quot;query&quot;: {    &quot;bool&quot;: {      &quot;must&quot;: [        { &quot;match&quot;: { &quot;age&quot;: &quot;40&quot; } }      ],      &quot;must_not&quot;: [        { &quot;match&quot;: { &quot;state&quot;: &quot;ID&quot; } }      ]    }  }}</code></pre><ul><li>布尔查询-过滤<br>查询 bank 索引中 balance 值在 20000 到 30000 之间的文档</li></ul><pre><code>GET /bank/_search{  &quot;query&quot;: {    &quot;bool&quot;: {      &quot;must&quot;: { &quot;match_all&quot;: {} },      &quot;filter&quot;: {        &quot;range&quot;: {          &quot;balance&quot;: {            &quot;gte&quot;: 20000,            &quot;lte&quot;: 30000          }        }      }    }  }}</code></pre><ul><li>聚合查询<br>对所有文档进行聚合，state 值相同的分到同一个桶里，分桶结果命名为 group_by_state ，再对每个桶里的文档的 balance 字段求平均值，结果命名为 average_balance，通过设置 size 的值为0，不返回任何文档内容</li></ul><pre><code>GET /bank/_search{  &quot;size&quot;: 0,  &quot;aggs&quot;: {    &quot;group_by_state&quot;: {      &quot;terms&quot;: {        &quot;field&quot;: &quot;state.keyword&quot;      },      &quot;aggs&quot;: {        &quot;average_balance&quot;: {          &quot;avg&quot;: {            &quot;field&quot;: &quot;balance&quot;          }        }      }    }  }}</code></pre><p>分别计算 age 值在 20~30 ，30~40，40~50 三个年龄段的男和女的平均存款balance</p><pre><code>GET /bank/_search{  &quot;size&quot;: 0,  &quot;aggs&quot;: {    &quot;group_by_age&quot;: {      &quot;range&quot;: {        &quot;field&quot;: &quot;age&quot;,        &quot;ranges&quot;: [          {            &quot;from&quot;: 20,            &quot;to&quot;: 30          },          {            &quot;from&quot;: 30,            &quot;to&quot;: 40          },          {            &quot;from&quot;: 40,            &quot;to&quot;: 50          }        ]      },      &quot;aggs&quot;: {        &quot;group_by_gender&quot;: {          &quot;terms&quot;: {            &quot;field&quot;: &quot;gender.keyword&quot;          },          &quot;aggs&quot;: {            &quot;average_balance&quot;: {              &quot;avg&quot;: {                &quot;field&quot;: &quot;balance&quot;              }            }          }        }      }    }  }}</code></pre><blockquote><p>参考文档：</p><ol><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="noopener">elasticsearch 官方文档 Getting Started</a></li><li>慕课网 <a href="https://coding.imooc.com/class/181.html" target="_blank" rel="noopener">Elastic Stack从入门到实践</a></li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo+github pages搭建博客</title>
      <link href="/2018/05/%E4%BD%BF%E7%94%A8hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/05/%E4%BD%BF%E7%94%A8hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h2><p>就如我在博客主页上所说，主要有三点：</p><ol><li>记录与分享</li><li>锤炼技术，提高写作能力和表达能力</li><li>树立个人品牌，提高影响力</li></ol><p>而在此博客之前，我在CSDN上写过一些博客，截止于2018年5月23日，个人资料如下：</p><img title="小旋锋的csdn个人资料" alt="小旋锋的csdn个人资料" src="http://image.laijianfeng.org/static/images/201805/20180523_232554.png"><p>当我在CSDN上写博客的时候，几乎每天都会去看看阅读量增加了多少，排名增加了多少，又增加了几个粉丝或者新评论，每每都会带给我兴奋感，让我感到写博客其实是一件很有意义的事情，并且反过来推动我学习和记录，写更多的博客。</p><p>而为什么现在要重新整一个博客呢？主要是因为之前CSDN的博客更多的是转载和低质量的，而博主即将毕业，正走在程序员的职业道路上，需要树立个人品牌，写博客是目前对我比较合适且能做到的方式。</p><p>而独立博客自由度更高，第三方博客平台推广则更快，所以最终决定采用独立博客首发，第三方平台分发引流的模式。</p><p>我的第三方平台账户：</p><ul><li><a href="https://www.jianshu.com/u/ae269fd3620a" target="_blank" rel="noopener">小旋锋的简书</a></li><li><a href="https://blog.csdn.net/wwwdc1012" target="_blank" rel="noopener">小旋锋的csdn博客</a></li><li><a href="https://www.zhihu.com/people/whirlys/activities" target="_blank" rel="noopener">小旋锋的知乎</a></li><li><a href="http://image.laijianfeng.org/static/images/201805/20180523_230522.jpg" target="_blank" rel="noopener">小旋锋的微信公众号</a></li></ul><h2 id="Hexo主题选择"><a href="#Hexo主题选择" class="headerlink" title="Hexo主题选择"></a>Hexo主题选择</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架，可托管于github pages，可免去维护服务器的麻烦，博主们可更专注于内容的创作，并且Hexo主题众多，总有一款适合你。</p><p>我对主题的要求主要有：</p><ol><li>不要太大众</li><li>大气美观</li><li>功能齐全</li></ol><p>经过了几天的搜索之后，筛选了几个比较满意的Hexo主题如下：</p><ol><li><a href="http://blog.zhangruipeng.me/hexo-theme-hueman/about/index.html" target="_blank" rel="noopener">Hueman</a></li><li><a href="http://jacman.wuchong.me/2014/11/20/how-to-use-jacman/" target="_blank" rel="noopener">jacman</a></li><li><a href="https://www.haomwei.com/" target="_blank" rel="noopener">大道至简</a></li><li><a href="http://threehao.com/" target="_blank" rel="noopener">Loo’s Blog</a></li><li><a href="http://yelog.org/2017/03/23/3-hexo-instruction/" target="_blank" rel="noopener">3-hexo</a></li></ol><p>最终选择了 <a href="http://yelog.org/2017/03/23/3-hexo-instruction/" target="_blank" rel="noopener">3-hexo</a> 这款主题，当然还有很多不错的主题。</p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="1-根据-Hexo官网-步骤安装-git，node-js"><a href="#1-根据-Hexo官网-步骤安装-git，node-js" class="headerlink" title="1. 根据 Hexo官网 步骤安装 git，node.js"></a>1. 根据 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官网</a> 步骤安装 git，node.js</h3><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><pre><code class="javascript">npm install -g hexo-cli</code></pre><p>安装 Hexo 完成后，新建一个博客的主目录，然后执行以下命令：</p><pre><code class="shell">hexo init &lt;folder&gt;cd &lt;folder&gt;npm install</code></pre><p>新建完成之后该目录的目录结构如下:</p><p>.</p><p>├── _config.yml        # 网站的 配置 信息</p><p>├── package.json        # 应用程序的信息</p><p>├── scaffolds            # 模板文件夹</p><p>├── source            # 博文源文件目录</p><p>|   ├── _drafts        # 草稿文件夹</p><p>|   └── _posts            # 博文文件夹</p><p>└── themes            # 主题文件夹</p><p>再执行以下命令，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可快速体验Hexo</p><pre><code class="shell">hexo ghexo s</code></pre><img src="http://image.laijianfeng.org/static/images/201805/20180524_003246.png"><h3 id="3-根据-Hexo文档-对网站做一些简单的配置，然后修改主题为-3-hexo"><a href="#3-根据-Hexo文档-对网站做一些简单的配置，然后修改主题为-3-hexo" class="headerlink" title="3. 根据 Hexo文档 对网站做一些简单的配置，然后修改主题为 3-hexo"></a>3. 根据 <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo文档</a> 对网站做一些简单的配置，然后修改主题为 <a href="https://github.com/yelog/hexo-theme-3-hexo" target="_blank" rel="noopener">3-hexo</a></h3><p>安装</p><pre><code class="shell">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</code></pre><p>修改hexo根目录的_config.yml中的theme参数</p><pre><code class="javascript">theme: 3-hexo</code></pre><p>然后执行 hexo clean &amp; hexo g &amp; hexo s 即可看到效果</p><p>更多的主题配置可见 <a href="http://yelog.org/2017/03/23/3-hexo-instruction/" target="_blank" rel="noopener">3-hexo使用说明</a></p><h3 id="4-配置-github-pages"><a href="#4-配置-github-pages" class="headerlink" title="4. 配置 github pages"></a>4. 配置 github pages</h3><p>到github上创建一个新的空仓库，名字格式为 账户名.github.io，譬如我的github账户名是 <a href="https://github.com/whirlys" target="_blank" rel="noopener">whirlys</a>，所以我的github pages 仓库的名字应为 whirlys.github.io</p><p>安装插件</p><pre><code class="shell">npm install hexo-deployer-git --save</code></pre><p>然后配置 Hexo根目录的 _config.yml，xxx为你的用户名，注意还需要加入你的 github 用户名和密码，不然后面推送失败（但是上传代码时注意防止密码泄露）</p><pre><code class="shell">deploy:  type: git  repo: https://[github用户名]:[github密码]@github.com/xxx/xxx.github.io.git  branch: master</code></pre><p>如果你是第一次配置 github 远程仓库，你还须将你电脑的ssh key 配置到 github 上，具体可参考 <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="noopener">git远程仓库</a></p><p>推送Hexo到github</p><pre><code class="shell">hexo deploy</code></pre><p>访问 xxx.github.io 即可看到你的 github pages 博客了</p><h3 id="5-绑定私有域名"><a href="#5-绑定私有域名" class="headerlink" title="5. 绑定私有域名"></a>5. 绑定私有域名</h3><p>我的域名为 laijianfeng.org，是一年前买 腾讯云1元学生主机 时送的，当然可以选择其他域名提供商</p><p>在 hexo source 目录下新建一个 CNAME 文件（没有后缀名），在文件里填入你的域名，然后 hexo d 推送到github</p><p>登录域名提供商网站，进入域名解析页面，分别添加两条记录</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>线路类型</th><th>记录值</th></tr></thead><tbody><tr><td>@</td><td>CNAME</td><td>默认</td><td>xxx.github.io</td></tr><tr><td>www</td><td>CNAME</td><td>默认</td><td><a href="http://www.xxx.github.io" target="_blank" rel="noopener">www.xxx.github.io</a></td></tr></tbody></table><p>等待十分钟之后，访问你的域名即可跳转到你的博客</p><h3 id="6-其他的配置"><a href="#6-其他的配置" class="headerlink" title="6. 其他的配置"></a>6. 其他的配置</h3><ul><li>接入评论，3-hexo主题中已经集成了多种评论，我选择了gitment，具体的配置参考 <a href="http://yelog.org/2017/06/26/gitment/" target="_blank" rel="noopener">完美替代多说-gitment</a>，如果gitment遇到问题，譬如报Error：validation failed异常，可参考 <a href="http://xichen.pub/2018/01/31/2018-01-31-gitment/" target="_blank" rel="noopener">添加Gitment评论系统踩过的坑</a> 以及 <a href="https://github.com/imsun/gitment/issues" target="_blank" rel="noopener">gitment issue</a>上的解决方法</li><li>使用七牛云图床，参考 <a href="http://skyhacks.org/2017/08/02/UseQiniudnToStorePic/" target="_blank" rel="noopener">使用七牛为Hexo存储图片</a> 和 <a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">Hexo七牛同步插件</a></li><li>代码高亮，字数统计，参考 <a href="http://yelog.org/2017/03/07/3-hexo/" target="_blank" rel="noopener">Hexo主题3-hexo</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
